Traceback (most recent call last):
  File "/home/conda/users/envs/users-pangeofu/lib/python3.10/site-packages/jupyter_cache/executors/utils.py", line 58, in single_nb_execution
    executenb(
  File "/home/conda/users/envs/users-pangeofu/lib/python3.10/site-packages/nbclient/client.py", line 1204, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
  File "/home/conda/users/envs/users-pangeofu/lib/python3.10/site-packages/nbclient/util.py", line 84, in wrapped
    return just_run(coro(*args, **kwargs))
  File "/home/conda/users/envs/users-pangeofu/lib/python3.10/site-packages/nbclient/util.py", line 62, in just_run
    return loop.run_until_complete(coro)
  File "/home/conda/users/envs/users-pangeofu/lib/python3.10/asyncio/base_events.py", line 649, in run_until_complete
    return future.result()
  File "/home/conda/users/envs/users-pangeofu/lib/python3.10/site-packages/nbclient/client.py", line 663, in async_execute
    await self.async_execute_cell(
  File "/home/conda/users/envs/users-pangeofu/lib/python3.10/site-packages/nbclient/client.py", line 965, in async_execute_cell
    await self._check_raise_for_error(cell, cell_index, exec_reply)
  File "/home/conda/users/envs/users-pangeofu/lib/python3.10/site-packages/nbclient/client.py", line 862, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
# OUTPUT Location: 
workspace = f's3://rsignellbucket2/testing/prism/'

# OUTPUT Dataset Name:
FNAME = 'PRISM_v2.zarr'

# Instantiate a fsspec reference to the workspace: 
fsw = fsspec.filesystem('s3', 
    anon=False, 
    default_fill_cache=False, 
    skip_instance_cache=True, 
    client_kwargs={ 'endpoint_url': os.environ['AWS_S3_ENDPOINT'] },
) # this will take credentials from the environment variables, 
# as defined above. No need to specify profile or keys. The endpoint, 
# unfortunately is necessary to name explicitly.

outdir = workspace + FNAME
target_store = fsw.get_mapper(outdir)

for fname in [FNAME]:
    if fsw.exists(workspace + fname):
        logging.warning("Removing existing file/folder: %s", fname)
        fsw.rm(workspace + fname, recursive=True)

print("READY !!")

fsw.ls(workspace)

------------------

[0;31m---------------------------------------------------------------------------[0m
[0;31mKeyError[0m                                  Traceback (most recent call last)
Cell [0;32mIn[5], line 12[0m
[1;32m      5[0m FNAME [38;5;241m=[39m [38;5;124m'[39m[38;5;124mPRISM_v2.zarr[39m[38;5;124m'[39m
[1;32m      7[0m [38;5;66;03m# Instantiate a fsspec reference to the workspace: [39;00m
[1;32m      8[0m fsw [38;5;241m=[39m fsspec[38;5;241m.[39mfilesystem([38;5;124m'[39m[38;5;124ms3[39m[38;5;124m'[39m, 
[1;32m      9[0m     anon[38;5;241m=[39m[38;5;28;01mFalse[39;00m, 
[1;32m     10[0m     default_fill_cache[38;5;241m=[39m[38;5;28;01mFalse[39;00m, 
[1;32m     11[0m     skip_instance_cache[38;5;241m=[39m[38;5;28;01mTrue[39;00m, 
[0;32m---> 12[0m     client_kwargs[38;5;241m=[39m{ [38;5;124m'[39m[38;5;124mendpoint_url[39m[38;5;124m'[39m: [43mos[49m[38;5;241;43m.[39;49m[43menviron[49m[43m[[49m[38;5;124;43m'[39;49m[38;5;124;43mAWS_S3_ENDPOINT[39;49m[38;5;124;43m'[39;49m[43m][49m },
[1;32m     13[0m ) [38;5;66;03m# this will take credentials from the environment variables, [39;00m
[1;32m     14[0m [38;5;66;03m# as defined above. No need to specify profile or keys. The endpoint, [39;00m
[1;32m     15[0m [38;5;66;03m# unfortunately is necessary to name explicitly.[39;00m
[1;32m     17[0m outdir [38;5;241m=[39m workspace [38;5;241m+[39m FNAME

File [0;32m/home/conda/users/ef214d1986de9477d5223419ba4838d76e9839b19e4fb02c9e208c97cab5a61b-20230329-131713-443303-165-pangeofu/lib/python3.10/os.py:680[0m, in [0;36m_Environ.__getitem__[0;34m(self, key)[0m
[1;32m    677[0m     value [38;5;241m=[39m [38;5;28mself[39m[38;5;241m.[39m_data[[38;5;28mself[39m[38;5;241m.[39mencodekey(key)]
[1;32m    678[0m [38;5;28;01mexcept[39;00m [38;5;167;01mKeyError[39;00m:
[1;32m    679[0m     [38;5;66;03m# raise KeyError with the original key value[39;00m
[0;32m--> 680[0m     [38;5;28;01mraise[39;00m [38;5;167;01mKeyError[39;00m(key) [38;5;28;01mfrom[39;00m [38;5;28mNone[39m
[1;32m    681[0m [38;5;28;01mreturn[39;00m [38;5;28mself[39m[38;5;241m.[39mdecodevalue(value)

[0;31mKeyError[0m: 'AWS_S3_ENDPOINT'
KeyError: 'AWS_S3_ENDPOINT'

